{"name":"如何做好前端架构","tagline":"以New FM实战为例","body":"### 确定基础依赖\r\n- requirejs的AMD（异步模块依赖）\r\n- coffee & stylus\r\n- backbone & backbone layoutmanager\r\n- api & proxy\r\n\r\n### 规划目录结构\r\n```shell\r\nsrc_root\r\n├── package.json\r\n├── bower.json\r\n├── coffeelint.json\r\n├── nobone_sync_cfg.coffee\r\n├── Cakefile\r\n├── tpl/\r\n│   ├── index.tpl.html\r\n│   ├── bg.tpl.html\r\n│   ├── layout.tpl.html\r\n├── static/\r\n    ├── js/\r\n    │   ├── main.coffee\r\n    │   ├── core/\r\n    │   │   ├── cfg.coffee\r\n    │   │   ├── backbone_init.coffee\r\n    │   │   ├── utils.coffee\r\n    │   ├── module/\r\n    │   │   ├── channels.coffee\r\n    │   ├── view/\r\n    │   │   ├── channels.coffee\r\n    │   ├── lib/\r\n    │   │   ├── bower/\r\n    │   │   ├── require.js\r\n    ├── css/\r\n    │   ├── main.styl\r\n    │   ├── core/\r\n    │   │   ├── base.styl\r\n    │   │   ├── const.styl\r\n    │   │   ├── layout.styl\r\n    │   │   ├── mixin.styl\r\n    │   ├── view/\r\n    │   │   ├── channels.styl\r\n    │   ├── ui/\r\n    │   │   ├── pager.styl \r\n    ├── img/\r\n```\r\n\r\n### 构建编译方法\r\n- 基于 `nobone` 构建 coffee & stylus renderer\r\n- 使用cake构建命令行任务\r\n```shell\r\n➜  mbox git:(new-fm) cake\r\nCakefile defines the following tasks:\r\n\r\ncake setup                # Setup\r\ncake sync                 # Run nobone sync\r\ncake proxy                # Run API proxy\r\ncake dev                  # Run dev tools\r\n\r\n      --sync-off     Disable the nobone sync.\r\n      --proxy-off    Disable proxy.\r\n\r\n➜  mbox git:(new-fm) cake dev\r\n[2015-01-09 10:02:42] >> Listen: 8813 0ms\r\n[2015-01-09 10:02:43] Watched: 1990 0ms\r\n```\r\n\r\n### 跑通基础页面\r\n重在验证编译和配置，能得到从数据获取到页面渲染的hello world级页面即可。\r\n\r\n### 代码重构优化\r\n#### 提炼通用方法\r\n```coffee\r\nutils =\r\n    api: (url, data, options) ->\r\n        def = $.Deferred()\r\n        defaults =\r\n            api_url: '/dev/api/?tn={{method}}'\r\n            type: 'GET'\r\n            data_type: 'json'\r\n            processData: false\r\n            handle_err: (r) ->\r\n                console?.error(r)\r\n        opts = _.merge defaults, options\r\n\r\n        getUrl = (method) ->\r\n            return method if method.startsWith('/')\r\n            opts.api_url.replace('{{method}}', method)\r\n\r\n        if _.isArray(url)\r\n            exec = _.map(url, (url) ->\r\n                utils.api(url)\r\n            )\r\n            return $.when.apply(utils, exec)\r\n\r\n        if _.isObject(url)\r\n            options = data\r\n            data = url.data\r\n            url = url.url\r\n\r\n        data or= {}\r\n        data.hashcode = App.hash_code or ''\r\n\r\n        $.ajax\r\n            url: getUrl(url)\r\n            data: data or {}\r\n            dataType: opts.data_type\r\n            type: opts.type\r\n\r\n            success: (r) ->\r\n                if r.errorCode is 22000\r\n                    return def.resolve(r.data)\r\n\r\n                { status, hash_code } = r\r\n\r\n                if status is 0\r\n                    App.hash_code = hash_code if hash_code\r\n                    return def.resolve(r)\r\n\r\n                opts.handle_err(r)\r\n                def.reject(r)\r\n\r\n            error: ->\r\n                def.reject('ajax error')\r\n                opts.handle_err('ajax error')\r\n\r\n        def.promise()\r\n\r\n    fetch_tmpl: (name, done) ->\r\n        url = 'tmpl/' + name\r\n        def = $.Deferred()\r\n        JST = window.JST or= {}\r\n\r\n        done = done or def.resolve\r\n        if JST[url]\r\n            done(JST[url])\r\n        else\r\n            require [url], (tmpl) ->\r\n                window.JST[url] = tmpl\r\n                done(tmpl)\r\n\r\n        def.promise()\r\n```\r\n```stylus\r\nicon($icon, $width, $height = $width)\r\n    inline-block()\r\n    size($width, $height)\r\n    text-indent: -999em\r\n    overflow: hidden\r\n    background: url($img_path + $icon + '.png') no-repeat 0 0\r\n    pngfix($icon)\r\n```\r\n\r\n#### 抽象复用结构\r\n```coffee\r\nBackbone.Layout.configure({\r\n    manage: true\r\n    fetchTemplate: (name) ->\r\n        utils.fetch_tmpl(name, @async())\r\n})\r\n\r\nmixins = do ->\r\n    fetch = (args) ->\r\n        def = $.Deferred()\r\n        done = (r...) =>\r\n            r = r[0] if r.length is 1\r\n            if @_format\r\n                r = @_format(r)\r\n            def.resolve(r)\r\n        fail = ->\r\n            def.reject()\r\n\r\n        if @_api\r\n            utils.api(_.merge @_api, args).done(done).fail(fail)\r\n\r\n        def.promise()\r\n    ->\r\n        @fetch = fetch\r\n\r\nmixins.call Model::\r\nmixins.call Collection::\r\n\r\n_.extend View::, {\r\n    initialize: ->\r\n        if @model\r\n            @listenTo(@model, 'change', @render)\r\n}\r\n```\r\n\r\n#### 总结优秀实践\r\n```coffee\r\n_.extend App, {\r\n    create_module: (options) ->\r\n        $.extend(true, {\r\n            Models: {}\r\n            Views: {}\r\n        }, options)\r\n\r\n    init_module: (name, options) ->\r\n        defaults =\r\n            args: []\r\n            need_css: true\r\n        opts = _.merge defaults, options\r\n\r\n        deps = [\r\n            \"coffee/module/#{name}\"\r\n        ]\r\n        if opts.need_css\r\n            deps.push \"css!styl/view/#{name}\"\r\n\r\n        require deps, (mod) ->\r\n            mod.initialize.apply(null, opts.args)\r\n}\r\n```\r\n```coffee\r\ndefine [\r\n    'coffee/view/channels'\r\n], (Views) ->\r\n    Module = App.create_module({\r\n        Views: Views\r\n    })\r\n\r\n    Module.Models.Main = Main = Backbone.Model.extend({\r\n        _api:\r\n            url: 'channellist'\r\n\r\n        _format: (data) ->\r\n            group_channels = _.groupBy data.channel_list, (c) ->\r\n                c.cate_order\r\n\r\n            channels = []\r\n            cate_order = _.sortBy(_.keys group_channels)\r\n\r\n            for cate in cate_order\r\n                c = group_channels[cate]\r\n                channels.push(_.sortBy c, (item) ->\r\n                    item.pv_order\r\n                )\r\n\r\n            {\r\n                cur_type: fmListModel.getCurType()\r\n                channels: channels\r\n            }\r\n    })\r\n\r\n    Module.initialize = ->\r\n        main = new Main()\r\n        mainView = new Views.Main({\r\n            model: main\r\n        })\r\n\r\n        App.use_layout().then ->\r\n            App.layout.setView('', mainView)\r\n            main.fetch().done (r) ->\r\n                main.set(r)\r\n\r\n    Module\r\n```\r\n\r\n#### 配置化、工具化、自动化\r\n例如：通过 `yeoman` 构建脚手架脚本；实现工具解决代码同步、合图等问题（ `nobone-sync` 和 `imerge` ）\r\n\r\n#### 与业务解构，形成独立框架 / 工具","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}